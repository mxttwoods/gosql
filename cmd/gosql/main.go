package main

import (
	"bufio"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// loop over all files in the sql directory and create a single sql file
func main() {
	// get the current directory
	dir, err := os.Getwd()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// get the sql directory
	sqlDir := filepath.Join(dir, "sql")

	// get the sql files
	files, err := ioutil.ReadDir(sqlDir)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// delete all deploy-* files in the current directory
	cwdFiles, err := ioutil.ReadDir(dir)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	// loop over all files in the current directory
	for _, file := range cwdFiles {
		if strings.HasPrefix(file.Name(), "deploy-") {
			// delete the file
			err := os.Remove(filepath.Join(dir, file.Name()))
			fmt.Println("Deleted: " + file.Name())
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
		}
	}

	// create a ascii timestamp with hypens
	timeStamp := time.Now().Format("01-02-2006")
	commentTime := time.Now().Format("01-02-2006 03:04.05")
	fmt.Println("Creating file: deploy-" + timeStamp + ".sql")

	// create a new file
	file, err := os.Create(filepath.Join(dir, "deploy-"+timeStamp+".sql"))
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer file.Close()

	// create a new writer
	writer := bufio.NewWriter(file)
	defer writer.Flush()

	// write a banner with the files included and the timestamp
	writer.WriteString("--\n")
	writer.WriteString("-- Created: " + commentTime + "\n")
	writer.WriteString("--\n")

	// write the list of files included
	writer.WriteString("-- Files included:\n")
	for _, file := range files {
		writer.WriteString("-- " + file.Name() + "\n")
	}
	// write a comment line
	writer.WriteString("--\n")

	// loop over all files
	for _, file := range files {
		// get the file name
		fileName := file.Name()

		// get the file path
		filePath := filepath.Join(sqlDir, fileName)

		// open the file
		f, err := os.Open(filePath)
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
		defer f.Close()

		// read the file
		reader := bufio.NewReader(f)

		// write a comment
		writer.WriteString("\n/*** Start " + fileName + " ***/\n")

		// print the file name to the console
		fmt.Println("Writing: " + fileName)

		// loop over all lines
		for {
			// read a line
			line, err := reader.ReadString('\n')
			if err != nil {
				if err != io.EOF {
					fmt.Println(err)
					os.Exit(1)
				}
				break
			}

			// remove the line break
			line = strings.TrimSpace(line)

			// write the line
			_, err = writer.WriteString(line + "\n")
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
		}
		// write a line break
		writer.WriteString("/*** End " + fileName + " ***/\n")
	}

	// write a comment
	writer.WriteString("\n/****** DO NOT EDIT THIS FILE ******/\n")

	// print a message to the console
	fmt.Println("Created deploy.sql")
}
